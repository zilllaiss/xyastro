---
import type { GetStaticPaths, Page } from "astro";
import SingleNoH2 from "../../layouts/SingleNoH2.astro"


export const getStaticPaths: GetStaticPaths = async ({paginate}) => {
    const posts = await Astro.glob('../posts/*.md')
    
    function countOccurrences(arr: any[], value: string) {
        return arr.reduce((acc, val) => (val === value ? acc + 1 : acc), 0);
    }

    const tags = posts.map(p => p.frontmatter.tags).flat().sort()
    const uniqueTags = [...new Set(tags)]

    const tagCount = uniqueTags.map(t => {
        return countOccurrences(tags, t)
    })

    posts.sort((a, b) => Date.parse(b.frontmatter.pubDate) - Date.parse(a.frontmatter.pubDate))
    
    const page = paginate(posts, { pageSize: 7 })
    return page.map(p => {
        
        return {
            params: {
                page: p.params.page
            },
            props: {
                page: p.props.page,
                uniqueTags,
                tagCount
            }
        }
    })
}

interface Props {
    page: Page
}

// @ts-ignore
const {page, uniqueTags, tagCount} = Astro.props;

---
<SingleNoH2 title="Blog">
    <div class="header-container">
        <h2>Blog</h2>
    </div>
    <main class="main-pair">
        <article class="post-field">
            {page.data.map(p => { 
                return (
                    <div class="post">
                        <section class="post-date">{p.frontmatter.pubDate.toString().slice(0,10)}</section>
                        <section class="post-container">
                            <section class="post-header">
                                <h3 class="post-title"><a href={p.url}>{p.frontmatter.title}</a></h3>
                                {p.frontmatter.tags && <div>{p.frontmatter.tags.map((t: string) => <span class="tag"><a href={`/tags/${t}`}>{t}</a></span>)}</div>}
                                <p>{p.frontmatter.preamble}</p>
                                {p.frontmatter.image && <img src={p.frontmatter.image.url} alt={p.frontmatter.image.alt}></img> }
                                <p class="readmore"><a href={p.url}>...read post</a></p>
                            </section>
                        </section>
                    </div>    
                )
            })}
        </article>
        <aside class="bar-right">
            <h3>Tags</h3>
            <ul class="section-tag">
                {uniqueTags.map((t: string, i: number) => { return (
                    <li><a href={`/tags/${t}`}>{t} ({tagCount[i]})</a></li>
                )})}
            </ul>
            <section class="icon">
                <h3>Find me on:</h3>
                <div class="icon-container">
                    <a href="https://github.com/zilllaiss/"><img class="icon-small" src="/icons/github.svg" alt="github">github.com/zilllaiss/</a>
                </div>
                <div class="icon-container">
                    <img class="icon-small" src="/icons/discord.svg" alt="discord"><span>zill_laiss</span>
                </div>
            </section>
        </aside>
    </main>
    <div class="pagination">
        {page.currentPage - 1 > 0 && <div class="pagination-page"><a href={page.url.prev}>Prev</a></div>}
        {page.size > 7 && <div class="pagination-current">{page.currentPage}</div>}
        {page.currentPage !== page.lastPage && <div class="pagination-page"><a href={page.url.next}>Next</a></div>}
    </div>

</SingleNoH2>

<style lang="scss">
    .header-container {
        margin: 45px 8% 20px 7.5%;
    } 

    .post-date {
        color: #fff;
    }
</style>